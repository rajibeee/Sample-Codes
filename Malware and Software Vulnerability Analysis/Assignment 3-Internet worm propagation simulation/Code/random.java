/* Rajib Dey */
/* CAP 6135 - Spring 18 */
/*Programing Project Assignment 3 */

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

enum Node {
	safe, vulnerable, infected; // setting up 3 types of enumarator
}

public class random {

	public static void main(String args[]) throws IOException {
		
		int maxtime=2500; // Setting Maximum time tick as 2500
		int[][] results = new int[maxtime+1][4];
		int maxTick=0;
		boolean tickFlag= true;
		for (int simCount = 1; simCount <= 3; simCount++) { // As we have to do 3 Simulations, the for loop is configured that way
			final int totalIP = 100000;
			int notFinished=1;
			tickFlag= true;
			Node nodeStatus[] = new Node[totalIP + 1];
			for (int i = 1; i <= totalIP; i++) {  //Marking all nodes as safe
				nodeStatus[i] = Node.safe;

			}
			// Identifying all the vulnerable computers
			for (int j = 0; j < 100; j++) {
				for (int i = 1; i <= 10; i++) {

					nodeStatus[i + (j * 1000)] = Node.vulnerable; //Assigning enumarators for them

				}
			}

			int tick = 0;
			int infectedCounter = 1;
			Node priorNodeStatus[] = new Node[totalIP + 1];

			for (int i = 1; i <= totalIP; i++) {
				priorNodeStatus[i] = Node.safe;
			}

			int count = 0;
			nodeStatus[1] = Node.infected;
			priorNodeStatus[1] = Node.infected;
			int tickToInfectAll=0;
			while (tick < maxtime) {
				tick = tick + 1;

				for (int i = 1; i <= totalIP; i++) {
					if (priorNodeStatus[i] == Node.infected) {

						count++;

					}
				}

				for (int i = 1; i <= (count * 3); i++) { // Eta= 3

					int randomIP = (int) (Math.random() * totalIP) + 1;
					if (nodeStatus[randomIP] == Node.vulnerable) {
						nodeStatus[randomIP] = Node.infected;
						infectedCounter++;
						priorNodeStatus[randomIP] = Node.infected;

					}

				}
				count = 0;
				results[tick][simCount] = infectedCounter;
				notFinished=0;
    
				for (int j = 0; j < 100; j++) {    // Finding time when all vulnerable computers got infected
					for (int i = 1; i <= 10; i++) {

						if(nodeStatus[i + (j * 1000)] == Node.vulnerable)
							notFinished=1;
					}
				}
				if(notFinished==0 && tickFlag== true){
					tickToInfectAll=tick;
					tickFlag= false;
				}
			}
			System.out.println("Total Time Tick for simulation #"+simCount+" to infect all vulnerable IP is = " +tickToInfectAll+ " tick");
			if(tickToInfectAll>maxTick)
				maxTick=tickToInfectAll;
		}

		for (int k = 1; k <= maxTick; k++) {
			for (int i = 1; i <= 3; i++) {
				
			}
			
		}
		try {
			File file = new File("random.txt"); // Writing to a text file
			file.createNewFile();
			FileWriter writer = new FileWriter(file, true);
			
			for (int k = 1; k <= maxTick+200; k++) {
				for (int i = 1; i <= 3; i++) {
					writer.write(results[k][i] + " ");

				}
				writer.write("\n");

			}
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

}
